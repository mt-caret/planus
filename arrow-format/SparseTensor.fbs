// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.




include "Tensor.fbs";

namespace org.apache.arrow.flatbuf;


































table SparseTensorIndexCOO {
  
  indicesType: Int (required);

  
  
  indicesStrides: [long];

  
  indicesBuffer: Buffer (required);

  
  
  
  
  
  isCanonical: bool;
}

enum SparseMatrixCompressedAxis: short { Row, Column }


table SparseMatrixIndexCSX {
  
  compressedAxis: SparseMatrixCompressedAxis;

  
  indptrType: Int (required);

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  indptrBuffer: Buffer (required);

  
  indicesType: Int (required);

  
  
  
  
  
  
  
  
  
  indicesBuffer: Buffer (required);
}


table SparseTensorIndexCSF {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  indptrType: Int (required);

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  indptrBuffers: [Buffer] (required);

  
  indicesType: Int (required);

  
  
  
  
  
  
  
  
  
  
  
  indicesBuffers: [Buffer] (required);

  
  
  
  
  
  
  axisOrder: [int] (required);
}

union SparseTensorIndex {
  SparseTensorIndexCOO,
  SparseMatrixIndexCSX,
  SparseTensorIndexCSF
}

table SparseTensor {
  
  
  
  type: Type (required);

  
  shape: [TensorDim] (required);

  
  non_zero_length: long;

  
  sparseIndex: SparseTensorIndex (required);

  
  data: Buffer (required);
}

root_type SparseTensor;
